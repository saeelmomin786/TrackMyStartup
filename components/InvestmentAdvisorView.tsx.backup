import React, { useState, useEffect } from 'react';
import { Startup, NewInvestment, ComplianceStatus, InvestmentOffer, User } from '../types';
import { investorService, ActiveFundraisingStartup } from '../lib/investorService';
import { paymentService } from '../lib/paymentService';
import Card from './ui/Card';
import Button from './ui/Button';
import Badge from './ui/Badge';
import Modal from './ui/Modal';
import Input from './ui/Input';
import { 
  TrendingUp, 
  DollarSign, 
  CheckSquare, 
  Eye, 
  Activity, 
  FileText, 
  Video, 
  Users, 
  Heart, 
  CheckCircle, 
  LayoutGrid, 
  Film, 
  Edit, 
  X, 
  Clock, 
  CheckCircle2, 
  Shield, 
  Menu, 
  Settings, 
  LogOut,
  Building2,
  Target,
  Search,
  Star,
  Send
} from 'lucide-react';
import ProfilePage from './ProfilePage';

interface InvestmentAdvisorViewProps {
  startups: Startup[];
  newInvestments: NewInvestment[];
  investmentOffers: InvestmentOffer[];
  users: User[];
  currentUser?: { 
    id: string; 
    email: string; 
    name: string;
    investment_advisor_code?: string;
    logo_url?: string;
  };
  onViewStartup: (startup: Startup) => void;
  onMakeOffer: (opportunity: NewInvestment, offerAmount: number, equityPercentage: number) => void;
  onUpdateOffer?: (offerId: number, offerAmount: number, equityPercentage: number) => void;
  onCancelOffer?: (offerId: number) => void;
}

const SummaryCard: React.FC<{ title: string; value: string; icon: React.ReactNode }> = ({ title, value, icon }) => (
  <Card className="flex-1">
    <div className="flex items-center justify-between">
      <div>
        <p className="text-sm font-medium text-slate-500">{title}</p>
        <p className="text-2xl font-bold text-slate-800">{value}</p>
      </div>
      <div className="p-3 bg-brand-light rounded-full">
        {icon}
      </div>
    </div>
  </Card>
);

const InvestmentAdvisorView: React.FC<InvestmentAdvisorViewProps> = ({ 
  startups, 
  newInvestments, 
  investmentOffers,
  users,
  currentUser,
  onViewStartup, 
  onMakeOffer,
  onUpdateOffer,
  onCancelOffer 
}) => {
  const formatCurrency = (value: number) => new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD', notation: 'compact' }).format(value);
  
  const [activeTab, setActiveTab] = useState<'dashboard' | 'reels' | 'deals' | 'my-investors' | 'my-startups' | 'investment-interests'>('dashboard');
  const [showProfilePage, setShowProfilePage] = useState(false);
  const [isRecommendModalOpen, setIsRecommendModalOpen] = useState(false);
  const [selectedStartupForRecommendation, setSelectedStartupForRecommendation] = useState<Startup | null>(null);
  const [recommendationDetails, setRecommendationDetails] = useState({
    dealValue: '',
    valuation: '',
    selectedInvestors: [] as string[]
  });

  // State for Discover Pitches functionality (same as Investor)
  const [activeFundraisingStartups, setActiveFundraisingStartups] = useState<ActiveFundraisingStartup[]>([]);
  const [shuffledPitches, setShuffledPitches] = useState<ActiveFundraisingStartup[]>([]);
  const [playingVideoId, setPlayingVideoId] = useState<number | null>(null);
  const [favoritedPitches, setFavoritedPitches] = useState<Set<number>>(new Set());
  const [showOnlyFavorites, setShowOnlyFavorites] = useState(false);
  const [showOnlyValidated, setShowOnlyValidated] = useState(false);
  const [isLoadingPitches, setIsLoadingPitches] = useState(false);

  // State for offers functionality
  const [isOfferModalOpen, setIsOfferModalOpen] = useState(false);
  const [selectedOpportunity, setSelectedOpportunity] = useState<Startup | null>(null);
  const [isEditOfferModalOpen, setIsEditOfferModalOpen] = useState(false);
  const [selectedOffer, setSelectedOffer] = useState<InvestmentOffer | null>(null);
  const [editOfferAmount, setEditOfferAmount] = useState('');
  const [editOfferEquity, setEditOfferEquity] = useState('');
  const [isLoadingInvestments, setIsLoadingInvestments] = useState(false);
  const [expandedVideoOfferId, setExpandedVideoOfferId] = useState<number | null>(null);

  // State for request acceptance workflow
  const [isAcceptRequestModalOpen, setIsAcceptRequestModalOpen] = useState(false);
  const [selectedRequest, setSelectedRequest] = useState<any>(null);
  const [requestType, setRequestType] = useState<'investor' | 'startup' | null>(null);
  const [financialMatrix, setFinancialMatrix] = useState({
    dealValue: '',
    valuation: '',
    successFee: '',
    scoutingFee: ''
  });
  const [agreementFile, setAgreementFile] = useState<File | null>(null);

  // Get accepted investors first (to exclude them from pending requests)
  const myInvestors = users.filter(user => 
    user.role === 'Investor' && 
    (user as any).investment_advisor_code_entered === currentUser?.investment_advisor_code &&
    (user as any).advisor_accepted === true
  );

  // Get pending investor requests (investors who entered the code but haven't been accepted yet)
  const pendingInvestorRequests = users.filter(user => 
    user.role === 'Investor' && 
    (user as any).investment_advisor_code_entered === currentUser?.investment_advisor_code &&
    !myInvestors.some(accepted => accepted.id === user.id) // Exclude already accepted investors
  );

  // Get accepted startups first (to exclude them from pending requests)
  const myStartups = startups.filter(startup => {
    // Find the user who owns this startup
    const startupUser = users.find(user => 
      user.role === 'Startup' && 
      user.id === startup.user_id
    );
    
    // Check if this user has entered the investment advisor code and has been accepted
    return startupUser && 
           (startupUser as any).investment_advisor_code_entered === currentUser?.investment_advisor_code &&
           (startupUser as any).advisor_accepted === true;
  });

  // Get pending startup requests - find startups whose users have entered the investment advisor code but haven't been accepted
  const pendingStartupRequests = startups.filter(startup => {
    // Find the user who owns this startup
    const startupUser = users.find(user => 
      user.role === 'Startup' && 
      user.id === startup.user_id
    );
    
    // Check if this user has entered the investment advisor code and exclude already accepted startups
    return startupUser && 
           (startupUser as any).investment_advisor_code_entered === currentUser?.investment_advisor_code &&
           !myStartups.some(accepted => accepted.id === startup.id); // Exclude already accepted startups
  });

  // Get offers made by my accepted investors
  const offersMadeByMyInvestors = investmentOffers.filter(offer => 
    myInvestors.some(investor => investor.email === offer.investorEmail)
  );

  // Get offers received by my accepted startups
  const offersReceivedByMyStartups = investmentOffers.filter(offer => 
    myStartups.some(startup => startup.name === offer.startupName)
  );

  // Get investment interests (startups liked by my accepted investors from Discover Pitches)
  const investmentInterests = newInvestments.filter(investment => 
    myInvestors.some(investor => investor.email === investment.investorEmail)
  );

  // Get deals (accepted offers involving my investors or startups)
  const myDeals = investmentOffers.filter(offer => 
    (myInvestors.some(investor => investor.email === offer.investorEmail) ||
     myStartups.some(startup => startup.name === offer.startupName)) &&
    offer.status === 'accepted'
  );

  // Debug logging
  console.log('🔍 Investment Advisor Debug:', {
    currentUserCode: currentUser?.investment_advisor_code,
    totalUsers: users.length,
    totalStartups: startups.length,
    pendingInvestorRequests: pendingInvestorRequests.length,
    pendingStartupRequests: pendingStartupRequests.length,
    myInvestors: myInvestors.length,
    myStartups: myStartups.length,
    offersMadeByMyInvestors: offersMadeByMyInvestors.length,
    offersReceivedByMyStartups: offersReceivedByMyStartups.length,
    investmentInterests: investmentInterests.length,
    myDeals: myDeals.length,
    
    // Debug: All users with investment advisor codes (both investors and startups)
    allUsersWithCodes: users.filter(user => 
      (user as any).investment_advisor_code_entered === currentUser?.investment_advisor_code
    ).map(user => ({
      userId: user.id,
      userName: user.name,
      userEmail: user.email,
      userRole: user.role,
      code: (user as any).investment_advisor_code_entered,
      accepted: (user as any).advisor_accepted
    })),
    
    // Debug: All startup users (regardless of code)
    allStartupUsers: users.filter(user => user.role === 'Startup').map(user => ({
      userId: user.id,
      userName: user.name,
      userEmail: user.email,
      userRole: user.role,
      code: (user as any).investment_advisor_code_entered,
      accepted: (user as any).advisor_accepted
    })),
    
    // Debug: Startup-user relationships for ALL startups
    startupUserRelationships: startups.map(startup => {
      const startupUser = users.find(user => user.role === 'Startup' && user.id === startup.user_id);
      return {
        startupId: startup.id,
        startupName: startup.name,
        startupUserId: startup.user_id,
        userFound: !!startupUser,
        userCode: startupUser ? (startupUser as any).investment_advisor_code_entered : null,
        userAccepted: startupUser ? (startupUser as any).advisor_accepted : null,
        matchesCurrentCode: startupUser ? (startupUser as any).investment_advisor_code_entered === currentUser?.investment_advisor_code : false
      };
    }),
    
    // Debug: Pending startup requests details
    pendingStartupDetails: pendingStartupRequests.map(startup => {
      const startupUser = users.find(user => user.role === 'Startup' && user.id === startup.user_id);
      return {
        startupId: startup.id,
        startupName: startup.name,
        startupUserId: startup.user_id,
        userCode: startupUser ? (startupUser as any).investment_advisor_code_entered : null,
        userAccepted: startupUser ? (startupUser as any).advisor_accepted : null
      };
    }),
    
    // Debug: Check if advisor_accepted field exists
    sampleUserFields: users.slice(0, 3).map(user => ({
      userId: user.id,
      userName: user.name,
      userRole: user.role,
      hasAdvisorAccepted: 'advisor_accepted' in user,
      advisorAcceptedValue: (user as any).advisor_accepted,
      allFields: Object.keys(user)
    })),
    
    // Debug: Check startup data
    sampleStartups: startups.slice(0, 3).map(startup => ({
      startupId: startup.id,
      startupName: startup.name,
      startupUserId: startup.user_id,
      allFields: Object.keys(startup)
    }))
  });


  const totalFunding = myStartups.reduce((acc, s) => acc + s.totalFunding, 0);
  const totalRevenue = myStartups.reduce((acc, s) => acc + s.totalRevenue, 0);
  const compliantCount = myStartups.filter(s => s.complianceStatus === ComplianceStatus.Compliant).length;
  const complianceRate = myStartups.length > 0 ? (compliantCount / myStartups.length) * 100 : 0;

  // Load active fundraising startups for Discover Pitches (same as Investor)
  useEffect(() => {
    const fetchActiveFundraisingStartups = async () => {
      setIsLoadingPitches(true);
      try {
        const startups = await investorService.getActiveFundraisingStartups();
        setActiveFundraisingStartups(startups);
      } catch (error) {
        console.error('Error fetching active fundraising startups:', error);
      } finally {
        setIsLoadingPitches(false);
      }
    };

    fetchActiveFundraisingStartups();
  }, []);

  // Shuffle pitches when reels tab is active (same as Investor)
  useEffect(() => {
    if (activeTab === 'reels' && activeFundraisingStartups.length > 0) {
      const verified = activeFundraisingStartups.filter(startup => 
        startup.complianceStatus === ComplianceStatus.Compliant
      );
      const unverified = activeFundraisingStartups.filter(startup => 
        startup.complianceStatus !== ComplianceStatus.Compliant
      );

      // Shuffle each group separately
      const shuffledVerified = [...verified].sort(() => Math.random() - 0.5);
      const shuffledUnverified = [...unverified].sort(() => Math.random() - 0.5);

      // Combine with verified first, then unverified
      const result = [...shuffledVerified, ...shuffledUnverified];
      setShuffledPitches(result);
    }
  }, [activeFundraisingStartups, activeTab]);

  // Filter pitches based on favorites and validation
  useEffect(() => {
    let filtered = [...activeFundraisingStartups];
    
    if (showOnlyFavorites) {
      filtered = filtered.filter(startup => favoritedPitches.has(startup.id));
    }
    
    if (showOnlyValidated) {
      filtered = filtered.filter(startup => startup.complianceStatus === ComplianceStatus.Compliant);
    }
    
    setShuffledPitches(filtered);
  }, [activeFundraisingStartups, showOnlyFavorites, showOnlyValidated, favoritedPitches]);

  const handleRecommendToInvestors = (startup: Startup) => {
    setSelectedStartupForRecommendation(startup);
    setIsRecommendModalOpen(true);
  };

  // Handle due diligence request
  const handleDueDiligenceClick = async (startup: ActiveFundraisingStartup) => {
    try {
      if (!currentUser?.id) {
        alert('User not found. Please log in again.');
        return;
      }

      // Create due diligence request
      const request = await paymentService.createDueDiligenceRequest(currentUser.id, startup.id.toString());
      
      // For now, simulate successful payment (in real implementation, integrate with payment gateway)
      const paymentIntent = await paymentService.createPaymentIntent(150, 'EUR', currentUser.id, 'due-diligence');
      
      // Process the payment
      await paymentService.processDueDiligencePayment(request.id, paymentIntent.id);
      
      alert('Due diligence request submitted successfully! You will receive the report within 24 hours.');
    } catch (error) {
      console.error('Error creating due diligence request:', error);
      alert('Failed to create due diligence request. Please try again.');
    }
  };

  const handleRecommendationSubmit = () => {
    if (!selectedStartupForRecommendation || recommendationDetails.selectedInvestors.length === 0) {
      alert('Please select at least one investor and provide deal details');
      return;
    }

    // Here you would implement the recommendation logic
    console.log('Recommendation submitted:', {
      startup: selectedStartupForRecommendation,
      details: recommendationDetails
    });

    alert(`Recommendation sent to ${recommendationDetails.selectedInvestors.length} investor(s)`);
    setIsRecommendModalOpen(false);
    setSelectedStartupForRecommendation(null);
    setRecommendationDetails({
      dealValue: '',
      valuation: '',
      selectedInvestors: []
    });
  };

  const handleInvestorToggle = (investorEmail: string) => {
    setRecommendationDetails(prev => ({
      ...prev,
      selectedInvestors: prev.selectedInvestors.includes(investorEmail)
        ? prev.selectedInvestors.filter(email => email !== investorEmail)
        : [...prev.selectedInvestors, investorEmail]
    }));
  };

  // Logout handler
  const handleLogout = () => {
    window.location.href = '/logout';
  };

  // Profile update handler
  const handleProfileUpdate = (updatedUser: any) => {
    console.log('Profile updated in InvestmentAdvisorView:', updatedUser);
  };

  // If profile page is open, show it instead of main content
  if (showProfilePage) {
    return (
      <ProfilePage
        currentUser={currentUser}
        onBack={() => setShowProfilePage(false)}
        onProfileUpdate={handleProfileUpdate}
        onLogout={handleLogout}
      />
    );
  }

  return (
    <div className="space-y-6">
      {/* Header Section with Logo and Advisor Code */}
      <Card className="bg-white border-gray-200">
        <div className="flex items-center justify-between py-6 px-6">
          <div className="flex items-center space-x-4">
            {/* Three-dot Menu */}
            <div className="relative profile-menu">
              <button
                onClick={() => setShowProfilePage(true)}
                className="p-2 rounded-full hover:bg-slate-100 transition-colors"
                aria-label="Profile menu"
              >
                <Menu className="h-6 w-6 text-slate-600" />
              </button>
            </div>
            
            {/* Logo and Company Name */}
            <div className="flex items-center space-x-3">
              {currentUser?.logo_url ? (
                <div className="relative">
                  <img 
                    src={currentUser.logo_url} 
                    alt="Company Logo" 
                    className="h-16 w-16 rounded-lg object-contain bg-white border border-gray-200 p-1"
                    style={{ 
                      maxWidth: '64px', 
                      maxHeight: '64px',
                      aspectRatio: '1/1'
                    }}
                    onError={(e) => {
                      // Fallback to TrackMyStartup logo if image fails to load
                      e.currentTarget.style.display = 'none';
                      e.currentTarget.nextElementSibling?.classList.remove('hidden');
                    }}
                  />
                  <div className="hidden h-16 w-16 rounded-lg bg-slate-100 flex items-center justify-center">
                    <Building2 className="h-8 w-8 text-slate-400" />
                  </div>
                </div>
              ) : (
                <div className="h-16 w-16 rounded-lg bg-slate-100 flex items-center justify-center">
                  <Building2 className="h-8 w-8 text-slate-400" />
                </div>
              )}
              <div>
                <h2 className="text-xl font-semibold text-gray-800">{currentUser?.name || 'Investment Advisor'}</h2>
                <p className="text-sm text-slate-500">Investment Advisor</p>
                {currentUser?.logo_url && (
                  <p className="text-xs text-blue-600 mt-1">Supported by Track My Startup</p>
                )}
              </div>
            </div>
          </div>
          
          <div className="flex items-center space-x-6">
            <div className="text-right">
              <p className="text-sm font-medium text-gray-500">Advisor Code:</p>
              <div className="flex items-center space-x-2">
                <span className="px-3 py-2 bg-purple-100 text-purple-800 rounded-lg font-mono text-sm font-semibold">
                  {currentUser?.investment_advisor_code || 'IA-XXXXXX'}
                </span>
              </div>
            </div>
            <div className="flex items-center space-x-2">
              <Target className="h-6 w-6 text-purple-600" />
              <span className="text-gray-700 font-medium">Investment Advisor</span>
            </div>
          </div>
        </div>
      </Card>

      {/* Tab Navigation */}
      <div className="border-b border-slate-200">
        <nav className="-mb-px flex space-x-6" aria-label="Tabs">
          <button
            onClick={() => setActiveTab('dashboard')}
            className={`${
              activeTab === 'dashboard'
                ? 'border-brand-primary text-brand-primary'
                : 'border-transparent text-slate-500 hover:text-slate-700 hover:border-slate-300'
            } flex items-center gap-2 whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm transition-colors focus:outline-none`}
          >
            <LayoutGrid className="h-5 w-5" />
            Dashboard
          </button>
          <button
            onClick={() => setActiveTab('reels')}
            className={`${
              activeTab === 'reels'
                ? 'border-brand-primary text-brand-primary'
                : 'border-transparent text-slate-500 hover:text-slate-700 hover:border-slate-300'
            } flex items-center gap-2 whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm transition-colors focus:outline-none`}
          >
            <Film className="h-5 w-5" />
            Discover Pitches
          </button>
          <button
            onClick={() => setActiveTab('deals')}
            className={`${
              activeTab === 'deals'
                ? 'border-brand-primary text-brand-primary'
                : 'border-transparent text-slate-500 hover:text-slate-700 hover:border-slate-300'
            } flex items-center gap-2 whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm transition-colors focus:outline-none`}
          >
            <DollarSign className="h-5 w-5" />
            My Deals
          </button>
          <button
            onClick={() => setActiveTab('my-investors')}
            className={`${
              activeTab === 'my-investors'
                ? 'border-brand-primary text-brand-primary'
                : 'border-transparent text-slate-500 hover:text-slate-700 hover:border-slate-300'
            } flex items-center gap-2 whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm transition-colors focus:outline-none`}
          >
            <Users className="h-5 w-5" />
            My Investors
          </button>
          <button
            onClick={() => setActiveTab('my-startups')}
            className={`${
              activeTab === 'my-startups'
                ? 'border-brand-primary text-brand-primary'
                : 'border-transparent text-slate-500 hover:text-slate-700 hover:border-slate-300'
            } flex items-center gap-2 whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm transition-colors focus:outline-none`}
          >
            <Building2 className="h-5 w-5" />
            My Startups
          </button>
          <button
            onClick={() => setActiveTab('investment-interests')}
            className={`${
              activeTab === 'investment-interests'
                ? 'border-brand-primary text-brand-primary'
                : 'border-transparent text-slate-500 hover:text-slate-700 hover:border-slate-300'
            } flex items-center gap-2 whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm transition-colors focus:outline-none`}
          >
            <Target className="h-5 w-5" />
            Investment Interests
          </button>
        </nav>
      </div>

      {/* Dashboard Tab */}
      {activeTab === 'dashboard' && (
        <div className="space-y-8 animate-fade-in">
          {/* Summary Cards */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <SummaryCard title="Total Funding" value={formatCurrency(totalFunding)} icon={<DollarSign className="h-6 w-6 text-brand-primary" />} />
            <SummaryCard title="Total Revenue" value={formatCurrency(totalRevenue)} icon={<TrendingUp className="h-6 w-6 text-brand-primary" />} />
            <SummaryCard title="Compliance Rate" value={`${complianceRate.toFixed(1)}%`} icon={<CheckSquare className="h-6 w-6 text-brand-primary" />} />
            <SummaryCard title="My Startups" value={`${myStartups.length}`} icon={<Building2 className="h-6 w-6 text-brand-primary" />} />
          </div>


          {/* Offer Management Tables */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {/* My Investor Offers */}
            <Card>
              <h3 className="text-lg font-semibold mb-4 text-slate-700">My Investor Offers</h3>
              <p className="text-sm text-slate-600 mb-4">Investors who have requested your services using your Investment Advisor Code</p>
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-slate-200">
                  <thead className="bg-slate-50">
                    <tr>
                      <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Investor Name</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Email</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Investment Range</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Stage</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Domain</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Status</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Actions</th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-slate-200">
                    {pendingInvestorRequests.length === 0 ? (
                      <tr>
                        <td colSpan={7} className="px-6 py-8 text-center text-slate-500">
                          No pending investor requests
                        </td>
                      </tr>
                    ) : (
                      pendingInvestorRequests.map((investor) => (
                        <tr key={investor.id} className="hover:bg-slate-50">
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className="text-sm font-medium text-slate-900">{investor.name}</div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className="text-sm text-slate-900">{investor.email}</div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-500">
                            Not specified
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-500">
                            Not specified
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-500">
                            Not specified
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <Badge variant="warning">Pending</Badge>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <Button
                              size="sm"
                              variant="outline"
                              onClick={() => {
                                setSelectedRequest(investor);
                                setRequestType('investor');
                                setIsAcceptRequestModalOpen(true);
                              }}
                            >
                              Accept Request
                            </Button>
                          </td>
                        </tr>
                      ))
                    )}
                  </tbody>
                </table>
                      </div>
            </Card>

            {/* My Startup Offers */}
            <Card>
              <h3 className="text-lg font-semibold mb-4 text-slate-700">My Startup Offers</h3>
              <p className="text-sm text-slate-600 mb-4">Startups who have requested your services using your Investment Advisor Code</p>
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-slate-200">
                  <thead className="bg-slate-50">
                    <tr>
                      <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Startup Name</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Email</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Fundraising Range</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Stage</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Domain</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Status</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Actions</th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-slate-200">
                    {pendingStartupRequests.length === 0 ? (
                      <tr>
                        <td colSpan={7} className="px-6 py-8 text-center text-slate-500">
                          No pending startup requests
                        </td>
                      </tr>
                    ) : (
                      pendingStartupRequests.map((startup) => (
                        <tr key={startup.id} className="hover:bg-slate-50">
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className="text-sm font-medium text-slate-900">{startup.name}</div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className="text-sm text-slate-900">{startup.user_id}</div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-500">
                            {formatCurrency(startup.totalFunding)}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-500">
                            {startup.sector || 'Not specified'}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-500">
                            {startup.sector || 'Not specified'}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <Badge variant="warning">Pending</Badge>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <Button
                              size="sm"
                              variant="outline"
                              onClick={() => {
                                setSelectedRequest(startup);
                                setRequestType('startup');
                                setIsAcceptRequestModalOpen(true);
                              }}
                            >
                              Accept Request
                            </Button>
                          </td>
                        </tr>
                      ))
                    )}
                  </tbody>
                </table>
                    </div>
            </Card>
          </div>

          {/* Investment Analytics Section */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {/* Domain Distribution Graph */}
            <Card>
              <h3 className="text-lg font-semibold mb-4 text-slate-700">Startup Domains Distribution</h3>
              <p className="text-sm text-slate-600 mb-4">Distribution of domains across your invested startups</p>
              <div className="h-64 flex items-center justify-center">
                <div className="text-center text-slate-500">
                  <div className="w-16 h-16 mx-auto mb-4 rounded-full bg-slate-100 flex items-center justify-center">
                    <div className="text-2xl">📊</div>
                  </div>
                  <p className="text-sm">No domain data available yet</p>
                  <p className="text-xs text-slate-400 mt-1">Domain distribution will appear here once you have invested startups</p>
                </div>
              </div>
            </Card>

            {/* My Invested Startups Table */}
            <Card>
              <h3 className="text-lg font-semibold mb-4 text-slate-700">My Invested Startups</h3>
              <p className="text-sm text-slate-600 mb-4">Startups where you hold equity positions</p>
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-slate-200">
                  <thead className="bg-slate-50">
                    <tr>
                      <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Startup</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Domain</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Equity %</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Investment</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Current Value</th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-slate-200">
                    <tr>
                      <td colSpan={5} className="px-6 py-8 text-center text-slate-500">
                        <div className="flex flex-col items-center">
                          <div className="w-12 h-12 mb-3 rounded-full bg-slate-100 flex items-center justify-center">
                            <div className="text-xl">💼</div>
                      </div>
                          <p className="text-sm font-medium">No invested startups yet</p>
                          <p className="text-xs text-slate-400 mt-1">Your equity investments will appear here</p>
                    </div>
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </Card>
          </div>
        </div>
      )}

      {/* Discover Pitches Tab - Full Implementation */}
      {activeTab === 'reels' && (
        <div className="animate-fade-in max-w-4xl mx-auto w-full">
          {/* Enhanced Header */}
          <div className="mb-8">
            <div className="text-center mb-6">
              <h2 className="text-2xl sm:text-3xl font-bold text-slate-800 mb-2">Discover Pitches</h2>
              <p className="text-sm text-slate-600">Watch startup videos and explore opportunities</p>
              </div>
            
            <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between bg-gradient-to-r from-blue-50 to-purple-50 p-4 rounded-xl border border-blue-100 gap-4">
              <div className="flex flex-col sm:flex-row items-start sm:items-center gap-3 sm:gap-4">
                <div className="flex flex-wrap items-center gap-2 sm:gap-3">
                  <button
                    onClick={() => {
                      setShowOnlyValidated(false);
                      setShowOnlyFavorites(false);
                    }}
                    className={`flex items-center gap-1 sm:gap-2 px-3 sm:px-4 py-2 rounded-lg text-xs sm:text-sm font-medium transition-all duration-200 shadow-sm ${
                      !showOnlyValidated && !showOnlyFavorites
                        ? 'bg-blue-600 text-white shadow-blue-200' 
                        : 'bg-white text-slate-600 hover:bg-blue-50 hover:text-blue-600 border border-slate-200'
                    }`}
                  >
                    <Film className="h-3 w-3 sm:h-4 sm:w-4" />
                    <span className="hidden sm:inline">All</span>
                  </button>
                  
                  <button
                    onClick={() => {
                      setShowOnlyValidated(true);
                      setShowOnlyFavorites(false);
                    }}
                    className={`flex items-center gap-1 sm:gap-2 px-3 sm:px-4 py-2 rounded-lg text-xs sm:text-sm font-medium transition-all duration-200 shadow-sm ${
                      showOnlyValidated && !showOnlyFavorites
                        ? 'bg-green-600 text-white shadow-green-200' 
                        : 'bg-white text-slate-600 hover:bg-green-50 hover:text-green-600 border border-slate-200'
                    }`}
                  >
                    <CheckCircle className={`h-3 w-3 sm:h-4 sm:w-4 ${showOnlyValidated && !showOnlyFavorites ? 'fill-current' : ''}`} />
                    <span className="hidden sm:inline">Verified</span>
                  </button>
                  
                  <button
                    onClick={() => {
                      setShowOnlyValidated(false);
                      setShowOnlyFavorites(true);
                    }}
                    className={`flex items-center gap-1 sm:gap-2 px-3 sm:px-4 py-2 rounded-lg text-xs sm:text-sm font-medium transition-all duration-200 shadow-sm ${
                      showOnlyFavorites
                        ? 'bg-red-600 text-white shadow-red-200' 
                        : 'bg-white text-slate-600 hover:bg-red-50 hover:text-red-600 border border-slate-200'
                    }`}
                  >
                    <Heart className={`h-3 w-3 sm:h-4 sm:w-4 ${showOnlyFavorites ? 'fill-current' : ''}`} />
                    <span className="hidden sm:inline">Favorites</span>
                  </button>
            </div>
            
                <div className="flex items-center gap-2 text-slate-600">
                  <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                  <span className="text-xs sm:text-sm font-medium">{activeFundraisingStartups.length} active pitches</span>
                </div>
              </div>
              
              <div className="flex items-center gap-2 text-slate-500">
                <Film className="h-4 w-4 sm:h-5 sm:w-5" />
                <span className="text-xs sm:text-sm">Pitch Reels</span>
              </div>
            </div>
          </div>
                
          <div className="space-y-8">
            {isLoadingPitches ? (
              <Card className="text-center py-20">
                <div className="max-w-sm mx-auto">
                  <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
                  <h3 className="text-xl font-semibold text-slate-800 mb-2">Loading Pitches...</h3>
                  <p className="text-slate-500">Fetching active fundraising startups</p>
              </div>
              </Card>
            ) : (() => {
              // Use activeFundraisingStartups for the main data source
              const pitchesToShow = activeTab === 'reels' ? shuffledPitches : activeFundraisingStartups;
              let filteredPitches = pitchesToShow;
              
              // Apply validation filter
              if (showOnlyValidated) {
                filteredPitches = filteredPitches.filter(inv => inv.isStartupNationValidated);
              }
              
              // Apply favorites filter
              if (showOnlyFavorites) {
                filteredPitches = filteredPitches.filter(inv => favoritedPitches.has(inv.id));
              }
              
              if (filteredPitches.length === 0) {
                return (
                  <Card className="text-center py-20">
                    <div className="max-w-sm mx-auto">
                      <Film className="h-16 w-16 text-slate-400 mx-auto mb-4" />
                      <h3 className="text-xl font-semibold text-slate-800 mb-2">
                        {showOnlyValidated 
                          ? 'No Verified Startups' 
                          : showOnlyFavorites 
                            ? 'No Favorited Pitches' 
                            : 'No Active Fundraising'
                        }
                      </h3>
                      <p className="text-slate-500">
                        {showOnlyValidated
                          ? 'No Startup Nation verified startups are currently fundraising. Try removing the verification filter or check back later.'
                          : showOnlyFavorites 
                            ? 'Start favoriting pitches to see them here.' 
                            : 'No startups are currently fundraising. Check back later for new opportunities.'
                        }
                      </p>
                    </div>
                  </Card>
                );
              }
              
              return filteredPitches.map(inv => {
                const embedUrl = investorService.getYoutubeEmbedUrl(inv.pitchVideoUrl);
                return (
                  <Card key={inv.id} className="!p-0 overflow-hidden shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 border-0 bg-white">
                    {/* Enhanced Video Section */}
                    <div className="relative w-full aspect-[16/9] bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900">
                      {embedUrl ? (
                        playingVideoId === inv.id ? (
                          <div className="relative w-full h-full">
                            <iframe
                              src={embedUrl}
                              title={`Pitch video for ${inv.name}`}
                              frameBorder="0"
                              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                              allowFullScreen
                              className="absolute top-0 left-0 w-full h-full"
                            ></iframe>
                        <button
                              onClick={() => setPlayingVideoId(null)}
                              className="absolute top-4 right-4 bg-black/70 text-white rounded-full p-2 hover:bg-black/90 transition-all duration-200 backdrop-blur-sm"
                            >
                              ×
                            </button>
                          </div>
                        ) : (
                          <div
                            className="relative w-full h-full group cursor-pointer"
                            onClick={() => setPlayingVideoId(inv.id)}
                          >
                            <div className="absolute inset-0 bg-gradient-to-b from-transparent via-transparent to-black/40" />
                            <div className="absolute inset-0 flex items-center justify-center">
                              <div className="w-20 h-20 bg-red-600 rounded-full flex items-center justify-center shadow-2xl transform group-hover:scale-110 transition-all duration-300 group-hover:shadow-red-500/50">
                                <svg className="w-10 h-10 text-white ml-1" fill="currentColor" viewBox="0 0 24 24">
                                  <path d="M8 5v14l11-7z" />
                                </svg>
                              </div>
                            </div>
                            <div className="absolute bottom-4 left-4 text-white opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                              <p className="text-sm font-medium">Click to play</p>
                            </div>
                          </div>
                        )
                      ) : (
                        <div className="w-full h-full flex items-center justify-center text-slate-400">
                          <div className="text-center">
                            <Video className="h-16 w-16 mx-auto mb-2 opacity-50" />
                            <p className="text-sm">No video available</p>
                          </div>
                        </div>
                      )}
                    </div>

                    {/* Enhanced Content Section */}
                    <div className="p-6">
                      <div className="flex items-start justify-between mb-4">
                        <div className="flex-1">
                          <h3 className="text-2xl font-bold text-slate-800 mb-2">{inv.name}</h3>
                          <p className="text-slate-600 font-medium">{inv.sector}</p>
                        </div>
                        <div className="flex items-center gap-2">
                          {inv.isStartupNationValidated && (
                            <div className="flex items-center gap-1 bg-gradient-to-r from-green-500 to-emerald-600 text-white px-3 py-1.5 rounded-full text-xs font-medium shadow-sm">
                              <CheckCircle className="h-3 w-3" />
                              Verified
                            </div>
                          )}
                        </div>
                      </div>
                                        
                      {/* Enhanced Action Buttons */}
                      <div className="flex items-center gap-4 mt-6">
                        <Button
                          size="sm"
                          variant="secondary"
                          className={`!rounded-full !p-3 transition-all duration-200 ${
                            favoritedPitches.has(inv.id)
                              ? 'bg-gradient-to-r from-red-500 to-pink-600 text-white shadow-lg shadow-red-200'
                              : 'hover:bg-red-50 hover:text-red-600 border border-slate-200'
                          }`}
                          onClick={() => {
                            const newFavorites = new Set(favoritedPitches);
                            if (newFavorites.has(inv.id)) {
                              newFavorites.delete(inv.id);
                            } else {
                              newFavorites.add(inv.id);
                            }
                            setFavoritedPitches(newFavorites);
                          }}
                        >
                          <Heart className={`h-5 w-5 ${favoritedPitches.has(inv.id) ? 'fill-current' : ''}`} />
                        </Button>

                        {inv.pitchDeckUrl && inv.pitchDeckUrl !== '#' && (
                          <a href={inv.pitchDeckUrl} target="_blank" rel="noopener noreferrer" className="flex-1">
                            <Button size="sm" variant="secondary" className="w-full hover:bg-blue-50 hover:text-blue-600 transition-all duration-200 border border-slate-200">
                              <FileText className="h-4 w-4 mr-2" /> View Deck
                            </Button>
                          </a>
                        )}

                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => handleDueDiligenceClick(inv)}
                          className="flex-1 hover:bg-purple-50 hover:text-purple-600 hover:border-purple-300 transition-all duration-200 border border-slate-200"
                        >
                          <Search className="h-4 w-4 mr-2" /> Due Diligence (€150)
                        </Button>

                        <Button
                          size="sm"
                          variant="primary"
                          onClick={() => onViewStartup(inv)}
                          className="flex-1 bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 transition-all duration-200 shadow-lg shadow-blue-200"
                        >
                          <Eye className="h-4 w-4 mr-2" /> View Details
                        </Button>
                      </div>
                    </div>
                  </Card>
                );
              });
            })()}
                  </div>
        </div>
      )}

      {/* My Deals Tab */}
      {activeTab === 'deals' && (
        <div className="space-y-6 animate-fade-in">
          <Card>
            <h3 className="text-lg font-semibold mb-4 text-slate-700">My Deals</h3>
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-slate-200">
                <thead className="bg-slate-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Startup</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Investor</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Deal Amount</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Equity</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Status</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Date</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Actions</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-slate-200">
                  {myDeals.map((offer) => (
                    <tr key={offer.id} className="hover:bg-slate-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm font-medium text-slate-900">{offer.startupName}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-slate-900">{offer.investorEmail}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-900">
                        {formatCurrency(offer.offerAmount)}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-900">
                        {offer.equityPercentage}%
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <Badge variant={
                          offer.status === 'accepted' ? 'success' :
                          offer.status === 'rejected' ? 'destructive' :
                          offer.status === 'pending' ? 'warning' : 'default'
                        }>
                          {offer.status}
                        </Badge>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-500">
                        {new Date(offer.createdAt).toLocaleDateString()}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <div className="flex gap-2">
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => {
                              setSelectedOffer(offer);
                              setEditOfferAmount(offer.offerAmount.toString());
                              setEditOfferEquity(offer.equityPercentage.toString());
                              setIsEditOfferModalOpen(true);
                            }}
                          >
                            <Edit className="h-4 w-4" />
                          </Button>
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => onCancelOffer?.(offer.id)}
                            className="text-red-600 hover:text-red-800"
                          >
                            <X className="h-4 w-4" />
                          </Button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
              {investmentOffers.filter(offer => offer.investorEmail === currentUser?.email).length === 0 && (
                <div className="text-center py-8">
                  <p className="text-slate-500">No offers made yet</p>
                </div>
              )}
            </div>
          </Card>
        </div>
      )}


      {/* My Investors Tab */}
      {activeTab === 'my-investors' && (
        <div className="space-y-6 animate-fade-in">
          <Card>
            <h3 className="text-lg font-semibold mb-4 text-slate-700">My Investors</h3>
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-slate-200">
                <thead className="bg-slate-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Investor Name</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Email</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Registration Date</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Status</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-slate-200">
                  {myInvestors.map(investor => (
                    <tr key={investor.id}>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-slate-900">{investor.name}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-500">{investor.email}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-500">{investor.registrationDate}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-500">
                        <Badge status={ComplianceStatus.Compliant} />
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </Card>

          <Card>
            <h3 className="text-lg font-semibold mb-4 text-slate-700">Offers Made by My Investors</h3>
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-slate-200">
                <thead className="bg-slate-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Investor</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Startup</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Offer Amount</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Equity %</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Status</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-slate-200">
                  {offersMadeByMyInvestors.length === 0 ? (
                    <tr>
                      <td colSpan={5} className="px-6 py-8 text-center text-slate-500">
                        No offers made by your investors yet
                      </td>
                    </tr>
                  ) : (
                    offersMadeByMyInvestors.map(offer => (
                      <tr key={offer.id}>
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-slate-900">{offer.investorName || offer.investorEmail}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-500">{offer.startupName}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-500">{formatCurrency(offer.offerAmount)}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-500">{offer.equityPercentage}%</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-500">
                          <Badge status={offer.status as any} />
                        </td>
                      </tr>
                    ))
                  )}
                </tbody>
              </table>
            </div>
          </Card>
        </div>
      )}

      {/* My Startups Tab */}
      {activeTab === 'my-startups' && (
        <div className="space-y-6 animate-fade-in">
          <Card>
            <h3 className="text-lg font-semibold mb-4 text-slate-700">My Startups</h3>
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-slate-200">
                <thead className="bg-slate-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Startup Name</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Sector</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Current Valuation</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Compliance Status</th>
                    <th className="px-6 py-3 text-right text-xs font-medium text-slate-500 uppercase tracking-wider">Actions</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-slate-200">
                  {myStartups.map(startup => (
                    <tr key={startup.id}>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-slate-900">{startup.name}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-500">{startup.sector}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-500">{formatCurrency(startup.currentValuation)}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-500">
                        <Badge status={startup.complianceStatus} />
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <Button size="sm" variant="outline" onClick={() => onViewStartup(startup)}>
                          <Eye className="h-4 w-4 mr-1" /> View
                        </Button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </Card>

          <Card>
            <h3 className="text-lg font-semibold mb-4 text-slate-700">Offers Received by My Startups</h3>
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-slate-200">
                <thead className="bg-slate-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Startup</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Investor</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Offer Amount</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Equity %</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Status</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-slate-200">
                  {offersReceivedByMyStartups.length === 0 ? (
                    <tr>
                      <td colSpan={5} className="px-6 py-8 text-center text-slate-500">
                        No offers received by your startups yet
                      </td>
                    </tr>
                  ) : (
                    offersReceivedByMyStartups.map(offer => (
                      <tr key={offer.id}>
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-slate-900">{offer.startupName}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-500">{offer.investorName || offer.investorEmail}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-500">{formatCurrency(offer.offerAmount)}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-500">{offer.equityPercentage}%</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-500">
                          <Badge status={offer.status as any} />
                        </td>
                      </tr>
                    ))
                  )}
                </tbody>
              </table>
            </div>
          </Card>
        </div>
      )}

      {/* Investment Interests Tab */}
      {activeTab === 'investment-interests' && (
        <div className="space-y-6 animate-fade-in">
          <Card>
            <h3 className="text-lg font-semibold mb-4 text-slate-700">Investment Interests</h3>
            <p className="text-sm text-slate-600 mb-6">
              Startups that your investors have shown interest in from the Discover Pitches section.
            </p>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {investmentInterests.map(startup => (
                <Card key={startup.id} className="hover:shadow-lg transition-shadow">
                  <div className="p-6">
                    <div className="flex items-start justify-between mb-4">
                      <div>
                        <h4 className="text-lg font-semibold text-slate-900">{startup.name}</h4>
                        <p className="text-sm text-slate-600">{startup.sector}</p>
                      </div>
                      {startup.complianceStatus === ComplianceStatus.Compliant && (
                        <div className="flex items-center gap-1 bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs font-medium">
                          <CheckCircle className="h-3 w-3" />
                          Verified
                        </div>
                      )}
                    </div>
                    
                    <div className="space-y-2 mb-4">
                      <div className="flex justify-between text-sm">
                        <span className="text-slate-500">Ask:</span>
                        <span className="font-medium">{formatCurrency(startup.investmentValue)}</span>
                      </div>
                      <div className="flex justify-between text-sm">
                        <span className="text-slate-500">Equity:</span>
                        <span className="font-medium">{startup.equityAllocation}%</span>
                      </div>
                      <div className="flex justify-between text-sm">
                        <span className="text-slate-500">Funding:</span>
                        <span className="font-medium">{formatCurrency(startup.totalFunding)}</span>
                      </div>
                    </div>
                    
                    <div className="flex gap-2">
                      {startup.pitchVideoUrl && (
                        <Button size="sm" variant="outline" className="flex-1">
                          <Video className="h-4 w-4 mr-1" /> View Video
                        </Button>
                      )}
                      {startup.pitchDeckUrl && (
                        <Button size="sm" variant="outline" className="flex-1">
                          <FileText className="h-4 w-4 mr-1" /> View Deck
                        </Button>
                      )}
                    </div>
                    
                    <div className="mt-4 pt-4 border-t border-slate-200">
                      <Button 
                        size="sm" 
                        variant="primary" 
                        className="w-full"
                        onClick={() => handleRecommendToInvestors(startup)}
                      >
                        <Send className="h-4 w-4 mr-1" /> Recommend to My Investors
                      </Button>
                    </div>
                  </div>
                </Card>
              ))}
            </div>
            
            {investmentInterests.length === 0 && (
              <div className="text-center py-12">
                <Target className="h-16 w-16 text-slate-400 mx-auto mb-4" />
                <h3 className="text-lg font-semibold text-slate-800 mb-2">No Investment Interests Yet</h3>
                <p className="text-slate-500">
                  When your investors like startups in the Discover Pitches section, they will appear here.
                </p>
              </div>
            )}
          </Card>
        </div>
      )}

      {/* Recommendation Modal */}
      <Modal 
        isOpen={isRecommendModalOpen} 
        onClose={() => setIsRecommendModalOpen(false)} 
        title={`Recommend ${selectedStartupForRecommendation?.name} to Investors`}
      >
        <div className="space-y-6">
          <div>
            <p className="text-sm text-slate-600 mb-4">
              Select investors to recommend <span className="font-semibold">{selectedStartupForRecommendation?.name}</span> to:
            </p>
            
            <div className="space-y-3 max-h-48 overflow-y-auto">
              {myInvestors.map(investor => (
                <label key={investor.id} className="flex items-center space-x-3 p-3 border border-slate-200 rounded-lg hover:bg-slate-50 cursor-pointer">
                  <input
                    type="checkbox"
                    checked={recommendationDetails.selectedInvestors.includes(investor.email)}
                    onChange={() => handleInvestorToggle(investor.email)}
                    className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-slate-300 rounded"
                  />
                  <div>
                    <p className="font-medium text-slate-900">{investor.name}</p>
                    <p className="text-sm text-slate-500">{investor.email}</p>
                  </div>
                </label>
              ))}
            </div>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <Input 
              label="Recommended Deal Value (USD)" 
              type="number" 
              value={recommendationDetails.dealValue}
              onChange={(e) => setRecommendationDetails(prev => ({ ...prev, dealValue: e.target.value }))}
              placeholder="Enter recommended investment amount"
            />
            <Input 
              label="Recommended Valuation (USD)" 
              type="number" 
              value={recommendationDetails.valuation}
              onChange={(e) => setRecommendationDetails(prev => ({ ...prev, valuation: e.target.value }))}
              placeholder="Enter recommended valuation"
            />
          </div>
          
          <div className="flex justify-end gap-3 pt-4">
            <Button type="button" variant="secondary" onClick={() => setIsRecommendModalOpen(false)}>
              Cancel
            </Button>
            <Button onClick={handleRecommendationSubmit}>
              Send Recommendations
            </Button>
          </div>
        </div>
      </Modal>

      {/* Make Offer Modal */}
      <Modal 
        isOpen={isOfferModalOpen} 
        onClose={() => setIsOfferModalOpen(false)} 
        title={`Make Offer to ${selectedOpportunity?.name}`}
      >
        <div className="space-y-6">
          <div className="bg-slate-50 p-4 rounded-lg">
            <h4 className="font-medium text-slate-900 mb-2">Startup Details</h4>
            <p className="text-sm text-slate-600 mb-1"><strong>Name:</strong> {selectedOpportunity?.name}</p>
            <p className="text-sm text-slate-600 mb-1"><strong>Valuation:</strong> {selectedOpportunity && formatCurrency(selectedOpportunity.valuation)}</p>
            <p className="text-sm text-slate-600"><strong>Description:</strong> {selectedOpportunity?.description}</p>
          </div>
          
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-slate-700 mb-2">Offer Amount ($)</label>
              <Input
                type="number"
                placeholder="Enter amount"
                value={editOfferAmount}
                onChange={(e) => setEditOfferAmount(e.target.value)}
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-slate-700 mb-2">Equity Percentage (%)</label>
              <Input
                type="number"
                placeholder="Enter percentage"
                value={editOfferEquity}
                onChange={(e) => setEditOfferEquity(e.target.value)}
              />
            </div>
          </div>
          
          <div className="flex justify-end gap-3 pt-4">
            <Button type="button" variant="secondary" onClick={() => setIsOfferModalOpen(false)}>
              Cancel
            </Button>
            <Button onClick={() => {
              if (selectedOpportunity && editOfferAmount && editOfferEquity) {
                onMakeOffer(selectedOpportunity, parseFloat(editOfferAmount), parseFloat(editOfferEquity));
                setIsOfferModalOpen(false);
                setEditOfferAmount('');
                setEditOfferEquity('');
              }
            }}>
              Make Offer
            </Button>
          </div>
        </div>
      </Modal>

      {/* Edit Offer Modal */}
      <Modal 
        isOpen={isEditOfferModalOpen} 
        onClose={() => setIsEditOfferModalOpen(false)} 
        title={`Edit Offer to ${selectedOffer?.startupName}`}
      >
        <div className="space-y-6">
          <div className="bg-slate-50 p-4 rounded-lg">
            <h4 className="font-medium text-slate-900 mb-2">Current Offer</h4>
            <p className="text-sm text-slate-600 mb-1"><strong>Startup:</strong> {selectedOffer?.startupName}</p>
            <p className="text-sm text-slate-600 mb-1"><strong>Current Amount:</strong> {selectedOffer && formatCurrency(selectedOffer.offerAmount)}</p>
            <p className="text-sm text-slate-600"><strong>Current Equity:</strong> {selectedOffer?.equityPercentage}%</p>
          </div>
          
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-slate-700 mb-2">New Offer Amount ($)</label>
              <Input
                type="number"
                placeholder="Enter amount"
                value={editOfferAmount}
                onChange={(e) => setEditOfferAmount(e.target.value)}
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-slate-700 mb-2">New Equity Percentage (%)</label>
              <Input
                type="number"
                placeholder="Enter percentage"
                value={editOfferEquity}
                onChange={(e) => setEditOfferEquity(e.target.value)}
              />
            </div>
          </div>
          
          <div className="flex justify-end gap-3 pt-4">
            <Button type="button" variant="secondary" onClick={() => setIsEditOfferModalOpen(false)}>
              Cancel
            </Button>
            <Button onClick={() => {
              if (selectedOffer && editOfferAmount && editOfferEquity) {
                onUpdateOffer?.(selectedOffer.id, parseFloat(editOfferAmount), parseFloat(editOfferEquity));
                setIsEditOfferModalOpen(false);
                setEditOfferAmount('');
                setEditOfferEquity('');
              }
            }}>
              Update Offer
            </Button>
          </div>
        </div>
      </Modal>

      <style>{`
        @keyframes fade-in {
          from { opacity: 0; }
          to { opacity: 1; }
        }
        .animate-fade-in {
          animation: fade-in 0.5s ease-in-out forwards;
        }
      `}</style>
    </div>
  );
};

export default InvestmentAdvisorView;
